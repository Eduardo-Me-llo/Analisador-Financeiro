import streamlit as st
import pandas as pd
import numpy as np
import re
import pdfplumber
#import chardet
from datetime import datetime, timedelta
from sklearn.ensemble import IsolationForest
import plotly.express as px
import plotly.graph_objects as go

# ================= CONFIGURAÇÃO INICIAL =================
st.set_page_config(layout="wide", page_title="Analisador Financeiro")

# ================= CONSTANTES DE CORES =================
CORES_CLARO = {
    "fundo": "#FFFFFF",
    "texto": "#000000",
    "card": "#F0F2F6",
    "borda": "#E0E0E0",
    "destaque": "#1E90FF",
    "botao": "#F0F2F6"
}

CORES_ESCURO = {
    "fundo": "#0E1117",
    "texto": "#FAFAFA",
    "card": "#262730",
    "borda": "#4E4E4E",
    "destaque": "#4FC3F7",
    "botao": "#262730"
}

CORES_POR_SETOR = {
    "Alimentação": "#FFEF09",  
    "Transporte": "#FFAE00",   
    "Lazer": "#4400FF",        
    "Saúde": "#00A2FF6E",       
    "Educação": "#00FFA2",   
    "Moradia": "#CE7B00",      
    "Financeiro": "#09FF00",   
    "Entretenimento": "#FF00DD",
    "Outros": "#D3D3D3"       
}

# ================= FUNÇÕES DE PROCESSAMENTO =================
def load_financial_data(uploaded_file):
    """Carrega dados de diferentes formatos (PDF, CSV, Excel)"""
    file_name = uploaded_file.name.lower()
    
    if file_name.endswith('.pdf'):
        return extract_pdf_data(uploaded_file)
    
    elif file_name.endswith('.csv'):
        # Detectar encoding automaticamente
        raw_data = uploaded_file.read()
        result = chardet.detect(raw_data)
        encoding = result['encoding'] if result['confidence'] > 0.7 else 'utf-8'
        
        uploaded_file.seek(0)  # Reset file pointer
        
        # Tentar diferentes delimitadores
        for sep in [',', ';', '\t']:
            try:
                return pd.read_csv(uploaded_file, encoding=encoding, sep=sep)
            except:
                continue
        st.error("Falha ao ler CSV. Verifique o formato e encoding.")
        return None
    
    elif file_name.endswith(('.xlsx', '.xls')):
        try:
            return pd.read_excel(uploaded_file)
        except Exception as e:
            st.error(f"Erro ao ler Excel: {str(e)}")
            return None
    
    else:
        st.error("Formato não suportado. Use PDF, CSV ou Excel.")
        return None

def extract_pdf_data(uploaded_file):
    """Extrai e limpa texto de PDFs bancários"""
    try:
        with pdfplumber.open(uploaded_file) as pdf:
            full_text = ""
            for page in pdf.pages:
                text = page.extract_text()
                text = re.sub(r'\n\s*(\d+ de \d+)\n', r'\n', text)
                text = re.sub(r'[⏰*•]', '', text)
                full_text += text + "\n"
            return full_text
    except Exception as e:
        st.error(f"Erro na leitura do PDF: {str(e)}")
        return ""

def parse_transactions(text, banco="padrao"):
    """Interpreta transações com base no formato do banco"""
    # Padrão para Banco do Brasil
    if banco.lower() == "banco do brasil":
        # Formato: DD/MM DESCRIÇÃO DD/MM R$ X.XXX,XX
        pattern = r"(\d{2}/\d{2})\s+(.*?)\s+(\d{2}/\d{2})\s+R\$\s*([\d\.,]+)"
        matches = re.findall(pattern, text)
        
        transactions = []
        for match in matches:
            try:
                data_compra, desc, data_lanc, valor_str = match
                
                # Converter valor para float
                valor_num = float(valor_str.replace('.', '').replace(',', '.'))
                
                # Determinar sinal (débito ou crédito)
                if "pagamento" in desc.lower() or "estorno" in desc.lower() or "devolução" in desc.lower():
                    valor_final = abs(valor_num)  # Crédito
                else:
                    valor_final = -abs(valor_num)  # Débito
                
                # Usar data da compra (primeira data)
                transactions.append({
                    "Data": datetime.strptime(f"{data_compra}/{datetime.now().year}", "%d/%m/%Y"),
                    "Descrição": desc.strip(),
                    "Valor": valor_final
                })
            except Exception as e:
                continue
        
        return pd.DataFrame(transactions)
    
    # Padrão para Nubank
    if banco.lower() == "nubank":
        pattern = r"(\d{1,2}\s+[A-Z]{3})\s+(.*?)\s+R\$\s*([\d\.]*,\d{2})"
        matches = re.findall(pattern, text)
        
        transactions = []
        meses_abrev = {
            'JAN': '01', 'FEV': '02', 'MAR': '03', 'ABR': '04',
            'MAI': '05', 'JUN': '06', 'JUL': '07', 'AGO': '08',
            'SET': '09', 'OUT': '10', 'NOV': '11', 'DEZ': '12'
        }
        
        for match in matches:
            try:
                data_str, desc, valor_str = match
                dia, mes_abrev = data_str.split()
                mes = meses_abrev.get(mes_abrev)
                if not mes:
                    continue
                    
                valor_num = float(valor_str.replace('.', '').replace(',', '.'))
                valor_final = abs(valor_num) if any(kw in desc.lower() for kw in ["pagamento", "recebido"]) else -abs(valor_num)
                
                transactions.append({
                    "Data": datetime.strptime(f"{dia}/{mes}/{datetime.now().year}", "%d/%m/%Y"),
                    "Descrição": desc,
                    "Valor": valor_final
                })
            except Exception:
                continue
        
        return pd.DataFrame(transactions)
    
    # Padrões para outros bancos
    padroes = {
        "itau": r"(\d{2}/\d{2})\s+([\w\s\.\-]+?)\s+(-?\d+[\.,]\d{2})",
        "bradesco": r"(\d{2}/\d{2})\s+(\d{2}/\d{2})\s+([\w\s\.\-]+?)\s+(-?\d+[\.,]\d{2})",
        "santander": r"(\d{2}/\d{2})\s+([\w\s\.\-]+?)\s+(-?\d+[\.,]\d{2})",
        "padrao": r"(\d{2}/\d{2})\s+([\w\s\.\-]+?)\s+(-?\d{1,3}(?:\.\d{3})*,\d{2})"
    }
    
    pattern = padroes.get(banco.lower(), padroes["padrao"])
    matches = re.findall(pattern, text)
    
    transactions = []
    for match in matches:
        try:
            date = match[0]
            desc = match[1] if len(match) < 4 else match[2]
            amount = match[-1]
            
            amount_val = float(amount.replace('.', '').replace(',', '.'))
            transactions.append({
                "Data": datetime.strptime(f"{date}/{datetime.now().year}", "%d/%m/%Y"),
                "Descrição": desc.strip(),
                "Valor": amount_val
            })
        except Exception:
            continue
    
    return pd.DataFrame(transactions)

def classify_transaction(row, rules):
    """Classificação hierárquica com regras customizáveis"""
    for pattern, category in rules.items():
        if re.search(pattern, row["Descrição"], re.IGNORECASE):
            setor = category.split(">")[1]
            return category.split(">") + [CORES_POR_SETOR.get(setor, "#D3D3D3")]
    
    desc = row["Descrição"].lower()
    
    if "uber" in desc: 
        return ["Uber", "Transporte", "Débito", "Variável", CORES_POR_SETOR["Transporte"]]
    if "ifood" in desc: 
        return ["iFood", "Alimentação", "Débito", "Variável", CORES_POR_SETOR["Alimentação"]]
    if "drogarias pacheco" in desc or "drogaria" in desc or "farma" in desc:
        return ["Farmácia", "Saúde", "Débito", "Essencial", CORES_POR_SETOR["Saúde"]]
    if "airbnb" in desc or "hote" in desc or "pousada" in desc:
        return ["Hospedagem", "Lazer", "Crédito", "Variável", CORES_POR_SETOR["Lazer"]]
    if "natura" in desc or "boticário" in desc or "beleza" in desc:
        return ["Beleza", "Pessoal", "Crédito", "Variável", CORES_POR_SETOR["Saúde"]]
    if "mercado" in desc or "supermerc" in desc or "atacad" in desc or "carrefour" in desc: 
        return ["Supermercado", "Alimentação", "Débito", "Essencial", CORES_POR_SETOR["Alimentação"]]
    if "posto" in desc or "combust" in desc or "auto posto" in desc: 
        return ["Posto", "Transporte", "Débito", "Essencial", CORES_POR_SETOR["Transporte"]]
    if "netflix" in desc or "spotify" in desc or "google one" in desc or "stream" in desc: 
        return ["Streaming", "Entretenimento", "Assinatura", "Recorrente", CORES_POR_SETOR["Entretenimento"]]
    if "fatura" in desc or "cartão" in desc or "juros" in desc or "anuidade" in desc: 
        return ["Banco", "Financeiro", "Taxa", "Recorrente", CORES_POR_SETOR["Financeiro"]]
    if "pagamento recebido" in desc or "pagto recebido" in desc: 
        return ["Pagamento", "Financeiro", "Crédito", "Recorrente", CORES_POR_SETOR["Financeiro"]]
    if "bb " in desc or "banco do brasil" in desc:
        return ["Banco do Brasil", "Financeiro", "Taxa", "Recorrente", CORES_POR_SETOR["Financeiro"]]
    
    return ["Outros", "Outros", "Outros", "Não Classificado", CORES_POR_SETOR["Outros"]]

def generate_historical_data(base_date, months=6):
    """Gera dados históricos simulados para 6 meses"""
    dates = []
    amounts = []
    for i in range(months):
        date = (base_date - timedelta(days=30*(i+1))).strftime("%Y-%m")
        dates.append(date)
        amounts.append(np.random.uniform(1000, 5000))
    
    return pd.DataFrame({
        "Mês": dates[::-1],
        "Gastos": amounts[::-1]
    })

def apply_dark_mode(dark_mode):
    """Aplica o tema dark ou light ao app com melhor contraste"""
    if dark_mode:
        theme = CORES_ESCURO
    else:
        theme = CORES_CLARO
    
    st.markdown(
        f"""
        <style>
            /* Configurações gerais */
            .stApp {{
                background-color: {theme['fundo']} !important;
                color: {theme['texto']} !important;
            }}
            
            /* Texto em todos os elementos */
            h1, h2, h3, h4, h5, h6, p, div, span, label {{
                color: {theme['texto']} !important;
            }}
            
            /* Componentes do Streamlit */
            .stExpander {{
                background-color: {theme['card']} !important;
                border-color: {theme['borda']} !important;
            }}
            .stDataFrame, .stTable {{
                background-color: {theme['card']} !important;
                color: {theme['texto']} !important;
            }}
            .css-1aumxhk {{
                background-color: {theme['card']} !important;
                color: {theme['texto']} !important;
            }}
            .st-bb, .st-at, .st-ax {{
                background-color: {theme['card']} !important;
            }}
            .stSelectbox, .stTextInput, .stNumberInput, .stDateInput {{
                background-color: {theme['card']} !important;
                color: {theme['texto']} !important;
            }}
            .st-bh, .st-ag, .st-af {{
                border-color: {theme['borda']} !important;
            }}
            .stTabs [data-baseweb="tab"] {{
                background-color: {theme['card']} !important;
                color: {theme['texto']} !important;
            }}
            .stTabs [aria-selected="true"] {{
                background-color: {theme['fundo']} !important;
                color: {theme['destaque']} !important;
                font-weight: bold;
            }}
            .stButton>button {{
                background-color: {theme['botao']} !important;
                color: {theme['texto']} !important;
                border-color: {theme['borda']} !important;
            }}
            .stDownloadButton>button {{
                background-color: {theme['destaque']} !important;
                color: {theme['texto']} !important;
            }}
            .stAlert {{
                background-color: {theme['card']} !important;
                color: {theme['texto']} !important;
            }}
            
            /* Tabelas e DataFrames */
            table.dataframe {{
                background-color: {theme['card']} !important;
                color: {theme['texto']} !important;
            }}
            .dataframe th {{
                background-color: {theme['borda']} !important;
                color: {theme['texto']} !important;
            }}
            .dataframe tr:nth-child(even) {{
                background-color: {theme['fundo']} !important;
            }}
            
            /* Elementos do Plotly */
            .js-plotly-plot .plotly, .js-plotly-plot .plotly div {{
                color: {theme['texto']} !important;
            }}
        </style>
        """,
        unsafe_allow_html=True
    )
    return dark_mode

# ================= FUNÇÃO PRINCIPAL =================
def main():
    # Inicializar variáveis de sessão
    if 'df' not in st.session_state:
        st.session_state.df = pd.DataFrame()
    if 'df_raw' not in st.session_state:
        st.session_state.df_raw = pd.DataFrame()
    if 'rules' not in st.session_state:
        st.session_state.rules = {
            "ifood": "iFood>Alimentação>Débito>Variável",
            "uber": "Uber>Transporte>Débito>Variável",
            "amazon": "Amazon>Compras>Crédito>Supérfluo",
            "nubank": "Nubank>Financeiro>Taxa>Recorrente",
            "bb ": "Banco do Brasil>Financeiro>Taxa>Recorrente"
        }
    if 'dark_mode' not in st.session_state:
        st.session_state.dark_mode = False

    # Botão de Dark Mode
    col1, col2 = st.columns([6,1])
    with col1:
        st.title("📊 Sistema de Análise de Gastos")
    with col2:
        st.session_state.dark_mode = st.toggle("Dark Mode", value=st.session_state.dark_mode, key="dark_mode_toggle")
    
    apply_dark_mode(st.session_state.dark_mode)

    # ----- Upload e Processamento -----
    with st.expander("📤 Upload de Extrato", expanded=True):
        uploaded_file = st.file_uploader("Carregue seu extrato (PDF, CSV, Excel)", type=["pdf", "csv", "xlsx", "xls"])
        banco = st.selectbox("Banco", ["Nubank", "Itaú", "Bradesco", "Santander", "Banco do Brasil", "Outros"])
        
        if uploaded_file is not None:
            with st.spinner("Processando arquivo..."):
                # Tratamento para diferentes formatos
                if uploaded_file.name.lower().endswith('.pdf'):
                    raw_text = extract_pdf_data(uploaded_file)
                    
                    if raw_text:
                        df = parse_transactions(raw_text, banco)
                    else:
                        st.error("Falha na extração do texto.")
                        df = pd.DataFrame()
                else:
                    df = load_financial_data(uploaded_file)
                    
                    if df is not None:
                        # Padronizar colunas
                        df.columns = df.columns.str.lower()
                        col_mapping = {
                            'data': 'Data',
                            'descrição': 'Descrição',
                            'descricao': 'Descrição',
                            'valor': 'Valor',
                            'montante': 'Valor',
                            'amount': 'Valor',
                            'historico': 'Descrição'
                        }
                        df = df.rename(columns={c: col_mapping.get(c, c) for c in df.columns})
                        
                        # Verificar colunas essenciais
                        if 'Data' not in df.columns or 'Valor' not in df.columns:
                            st.error("Arquivo não contém colunas necessárias (Data e Valor)")
                            df = pd.DataFrame()
                        else:
                            # Converter tipos
                            if not pd.api.types.is_datetime64_any_dtype(df['Data']):
                                df['Data'] = pd.to_datetime(df['Data'], errors='coerce')
                            
                            if not pd.api.types.is_numeric_dtype(df['Valor']):
                                df['Valor'] = pd.to_numeric(
                                    df['Valor'].astype(str).str.replace('.', '').str.replace(',', '.'), 
                                    errors='coerce'
                                )
                
                if not df.empty:
                    st.success(f"{len(df)} transações detectadas!")
                    st.dataframe(df.head(3))
                    st.session_state.df_raw = df
                else:
                    st.warning("Nenhuma transação válida encontrada.")

    # ----- Classificação -----
    if 'df_raw' in st.session_state and not st.session_state.df_raw.empty:
        with st.expander("⚙️ Configurar Regras de Classificação"):
            st.write("Defina padrões para classificação automática (regex permitido)")
            
            rules = st.session_state.rules
            col1, col2 = st.columns(2)
            with col1:
                new_pattern = st.text_input("Padrão (ex: 'amazon'):")
            with col2:
                new_category = st.text_input("Categoria (Formato: Empresa>Setor>Tipo>Tag):")
            
            if st.button("Adicionar Regra") and new_pattern and new_category:
                rules[new_pattern] = new_category
                st.session_state.rules = rules
                st.success("Regra adicionada!")
            
            st.write("**Regras Ativas:**")
            for pattern, category in rules.items():
                st.code(f"{pattern} => {category}")
                
            if st.button("Limpar Regras"):
                st.session_state.rules = {}
                st.experimental_rerun()
        
        if st.button("🔀 Classificar Transações"):
            with st.spinner("Classificando..."):
                df = st.session_state.df_raw.copy()
                classification_results = []
                
                for _, row in df.iterrows():
                    result = classify_transaction(row, st.session_state.rules)
                    classification_results.append(result)
                    
                df[["Empresa", "Setor", "Tipo", "Tag", "Cor"]] = classification_results
                
                if not df.empty:
                    model = IsolationForest(contamination=0.05, random_state=42)
                    df["Anomalia"] = model.fit_predict(df[["Valor"]].values)
                    df["Anomalia"] = df["Anomalia"].map({1: False, -1: True})
                
                st.session_state.df = df
                st.success("Classificação completa!")

    # ----- Dashboard Interativo -----
    if 'df' in st.session_state and not st.session_state.df.empty:
        df = st.session_state.df
        df["Dia"] = df["Data"].dt.day
        df["Mês"] = df["Data"].dt.strftime("%Y-%m")
        df["Dia_Semana"] = df["Data"].dt.day_name()
        
        st.header("📈 Dashboard Financeiro")
        
        # Resumo Financeiro
        gastos_df = df[df["Valor"] < 0]
        total_gastos = abs(gastos_df["Valor"].sum())
        entradas_df = df[df["Valor"] > 0]
        total_entradas = entradas_df["Valor"].sum()
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Total Gastos", f"R$ {total_gastos:,.2f}")
        with col2:
            st.metric("Total Entradas", f"R$ {total_entradas:,.2f}")
        
        # Filtros
        col1, col2, col3 = st.columns(3)
        with col1:
            meses = st.multiselect("Meses", options=sorted(df["Mês"].unique()), default=df["Mês"].unique()[-1:])
        with col2:
            setores = st.multiselect("Setores", options=df["Setor"].unique(), default=df["Setor"].unique())
        with col3:
            tags = st.multiselect("Tags", options=df["Tag"].unique(), default=["Essencial", "Recorrente"])
        
        filtered_df = df[
            df["Mês"].isin(meses) & 
            df["Setor"].isin(setores) & 
            df["Tag"].isin(tags)
        ]
        
        # Visualizações
        tab1, tab2, tab3, tab4 = st.tabs(["Visão Geral", "Análise por Categoria", "Evolução Temporal", "Detalhes"])
        
        with tab1:
            st.subheader("Visão Geral dos Gastos")
            
            # Mapa de Calor por Dia do Mês
            st.write("**Mapa de Calor por Dia do Mês**")
            if not filtered_df.empty:
                heat_data = filtered_df.groupby(['Dia', 'Mês'])['Valor'].sum().abs().reset_index()
                heat_pivot = heat_data.pivot(index="Dia", columns="Mês", values="Valor").fillna(0)
                
                fig = px.imshow(
                    heat_pivot,
                    labels=dict(x="Mês", y="Dia", color="Valor Gasto"),
                    color_continuous_scale="blues",
                    aspect="auto"
                )
                st.plotly_chart(fig, use_container_width=True)
            
            # Comparativo com mês anterior
            if len(meses) >= 1:
                mes_atual = meses[-1]
                mes_anterior = (datetime.strptime(mes_atual + "-01", "%Y-%m-%d") - timedelta(days=30)).strftime("%Y-%m")
                
                gasto_mes_atual = filtered_df[(filtered_df["Mês"] == mes_atual) & (filtered_df["Valor"] < 0)]["Valor"].sum()
                gasto_mes_anterior = filtered_df[(filtered_df["Mês"] == mes_anterior) & (filtered_df["Valor"] < 0)]["Valor"].sum() if mes_anterior in df["Mês"].unique() else 0
                
                diff = abs(gasto_mes_atual) - abs(gasto_mes_anterior)
                perc = (diff / abs(gasto_mes_anterior)) * 100 if gasto_mes_anterior != 0 else 0
                
                st.metric(f"Gastos em {mes_atual}", f"R$ {abs(gasto_mes_atual):,.2f}", 
                         delta=f"{perc:.1f}% vs {mes_anterior}")
        
        with tab2:
            st.subheader("Análise por Categoria")
            
            col1, col2 = st.columns(2)
            with col1:
                # Gráfico de Pizza por Setor com cores personalizadas
                st.write("**Distribuição por Setor**")
                if not filtered_df.empty:
                    setor_data = filtered_df[filtered_df["Valor"] < 0].groupby(["Setor", "Cor"]).agg({"Valor": "sum"}).abs().reset_index()
                    
                    fig = px.pie(
                        setor_data,
                        names="Setor",
                        values="Valor",
                        hole=0.3,
                        color="Setor",
                        color_discrete_map={row["Setor"]: row["Cor"] for _, row in setor_data.iterrows()},
                        title="Distribuição de Gastos por Setor"
                    )
                    
                    fig.update_traces(
                        textposition='inside',
                        textinfo='percent+label',
                        marker=dict(line=dict(color='#FFFFFF', width=1)),
                        textfont=dict(size=12)
                    )
                    
                    fig.update_layout(
                        showlegend=True,
                        legend=dict(
                            orientation="h",
                            yanchor="bottom",
                            y=-0.3,
                            xanchor="center",
                            x=0.5
                        ),
                        margin=dict(l=20, r=20, t=40, b=20)
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                # Gráfico de Barras por Tag
                st.write("**Distribuição por Tag**")
                if not filtered_df.empty:
                    tag_data = filtered_df[filtered_df["Valor"] < 0].groupby("Tag")["Valor"].sum().abs().reset_index()
                    
                    # Definir cores para tags
                    cores_tags = {
                        "Essencial": "#4CAF50",
                        "Recorrente": "#2196F3",
                        "Variável": "#FFC107",
                        "Supérfluo": "#F44336"
                    }
                    
                    fig = px.bar(
                        tag_data,
                        x="Tag",
                        y="Valor",
                        color="Tag",
                        color_discrete_map=cores_tags,
                        text_auto=".2f"
                    )
                    
                    fig.update_layout(
                        xaxis_title=None,
                        yaxis_title="Valor Gasto (R$)",
                        showlegend=False
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
        
        with tab3:
            st.subheader("Evolução Temporal")
            
            # Dados históricos (simulados ou reais)
            hist_data = pd.DataFrame()
            if not filtered_df.empty:
                if len(filtered_df["Mês"].unique()) > 1:
                    hist_data = filtered_df[filtered_df["Valor"] < 0].groupby("Mês")["Valor"].sum().abs().reset_index()
                    hist_data.columns = ["Mês", "Gastos"]
                else:
                    base_date = datetime.strptime(filtered_df["Data"].max().strftime("%Y-%m") + "-28", "%Y-%m-%d")
                    hist_data = generate_historical_data(base_date)
            
            # Gráfico de Linha Evolutiva
            if not hist_data.empty:
                fig = px.line(
                    hist_data, 
                    x="Mês", 
                    y="Gastos", 
                    markers=True,
                    title="Evolução de Gastos (Últimos 6 meses)",
                    labels={"Gastos": "Total Gasto (R$)"},
                    line_shape="spline"
                )
                
                if not filtered_df.empty:
                    ultimo_mes = filtered_df["Mês"].max()
                    if ultimo_mes in hist_data["Mês"].values:
                        gasto_ultimo_mes = hist_data[hist_data["Mês"] == ultimo_mes]["Gastos"].values[0]
                        fig.add_trace(go.Scatter(
                            x=[ultimo_mes],
                            y=[gasto_ultimo_mes],
                            mode='markers',
                            marker=dict(size=12, color='red'),
                            name='Mês Atual'
                        ))
                
                st.plotly_chart(fig, use_container_width=True)
        
        with tab4:
            st.subheader("Transações Detalhadas")
            if not filtered_df.empty:
                display_df = filtered_df.copy()
                display_df["Valor"] = display_df["Valor"].apply(
                    lambda x: f"R$ {abs(x):,.2f} {'(Entrada)' if x > 0 else '(Saída)'}"
                )
                st.dataframe(
                    display_df.sort_values("Data", ascending=False),
                    height=400,
                    use_container_width=True
                )
            
            if not filtered_df.empty:
                csv = filtered_df.to_csv(index=False).encode("utf-8")
                st.download_button(
                    "📥 Exportar para CSV",
                    csv,
                    "transacoes.csv",
                    "text/csv",
                    key='download-csv'
                )
        
        # Alertas de anomalias
        if 'df' in st.session_state and not st.session_state.df.empty:
            anomalies = st.session_state.df[st.session_state.df["Anomalia"] & (st.session_state.df["Valor"] < 0)]
            if not anomalies.empty:
                st.warning(f"⚠️ {len(anomalies)} gastos incomuns detectados!")
                st.dataframe(
                    anomalies[["Data", "Descrição", "Valor", "Setor"]]
                    .assign(Valor=lambda x: x["Valor"].abs())
                    .sort_values("Valor", ascending=False),
                    height=300
                )

    # ================= RODAPÉ =================
    st.markdown("---")
    st.caption("Sistema de análise financeira v3.1")

# Ponto de entrada do aplicativo
if __name__ == "__main__":
    main()
